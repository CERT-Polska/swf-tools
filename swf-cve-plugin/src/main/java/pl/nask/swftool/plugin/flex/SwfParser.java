/*
 * Copyright (c) NASK, NCSC
 * 
 * This file is part of HoneySpider Network 2.0.
 * 
 * This is a free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package pl.nask.swftool.plugin.flex;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import flash.util.FileUtils;

public abstract class SwfParser {

	/**
	 * Will parse swf file against vulnerabilities.
	 * 
	 * @param filename path to the file to be parsed
	 * @return true, if doParseSwf returns true
	 * @throws IOException if subsequent calls throw an IOException. 
	 */
	public final boolean parseSwf(String filename) throws IOException {
		return parseSwf(new File(filename));
	}

	/**
	 * Will parse swf file against vulnerabilities. Calls doParseSwf for actual parsing.
	 * 
	 * @param file path to the file to be parsed
	 * @return true, if doParseSwf returns true
	 * @throws IOException if subsequent calls throw an IOException. 
	 */
	public final boolean parseSwf( File file) throws IOException {
		InputStream input = null;
		try {
			URL fileUrl = FileUtils.toURL( file );
			input = fileUrl.openStream();
			return doParseSwf(input);
		} catch ( IOException e ) {
			e.printStackTrace();
			throw e;
		} finally {
			close(input);
		}
	}
	
	 /**
     * called when we are done, no more tags coming
     */
    public void close(InputStream input)
    {
    	try {
    		if (input != null)
    			input.close();
		} catch( Exception ex ) {
			// error closing stream, ignore
		}
    }

    /**
     * Parse swf from the input stream and searches for a cve. The method is being called directly. 
     * 
     * @param is
     * @return true, if cve was found, false if not
     * @throws IOException
     */
	protected abstract boolean doParseSwf(InputStream is) throws IOException;
}
